---
title: "Inference of ancestral recombination graphs for population genomics"
subtitle: "Computational Methods in Evolution and Biodiversity"
author:
  - "Per Unneberg"
  - "Based on slides by Yan Wong
  <br><https://github.com/hyanwong/genealogy_workshop>"
date: last-modified
date-format: "DD-MMM-YYYY"
institute: NBIS
from: markdown+emoji
csl: https://raw.githubusercontent.com/citation-style-language/styles/master/apa.csl
bibliography: resources/bibliography.bib
format:
  revealjs:
    theme:
      - assets/css/nbis.scss
    embed-resources: true
    toc: false
    toc-depth: 1
    slide-level: 1
    slide-number: true
    preview-links: true
    chalkboard: false
    footer: "Tree sequence inference"
    smaller: false
    highlight-style: gruvbox
    fig-height: 12
    fig-width: 10
    width: 1280
    height: 720
    margin: 0.1
    navigation-mode: vertical
    reference-location: margin
    template-partials:
      - assets/www/title-slide.html
    title-slide-attributes:
      data-background-image: assets/logos/nbis-scilifelab.svg
      data-background-size: 500px
      data-background-position: top left

execute:
  echo: true
  warning: false
  cache: true
  include: true
  autodep: true
  eval: true
  error: true

knitr:
  opts_chunk:
    code-fold: false
    tidy: true
    comment-char: "#>"
    fig-format: svg
    engine.opts:
      dvisvgm.opts: --font-format=woff
      template: assets/www/tikzfig.tex
---

# Setup  {visibility="hidden" .unnumbered .unlisted}

```{r libs}
#| echo: false
#| eval: true
#| cache: FALSE
library(ggplot2)
library(scales)
library(viridis)
library(readxl)
library(yaml)
bw <- theme_bw(base_size=24) %+replace%
  theme(axis.text.x = element_text(angle = 45, hjust = 1, vjust = 1))
theme_set(bw)
knitr::knit_hooks$set(inline = function(x) {
                      prettyNum(x, big.mark=" ")
})
vars <- read_yaml("_variables.yml")
```

# Genomics data is large

:::: {.columns}

::: {.column width="50%"}

```{r }
#| echo: false
#| eval: true
#| out-width: 100%
#| fig-width: 12
#| fig-height: 8
data <- read_excel(vars$sequencingcost)
colnames(data) <- c("Date", "Mb", "Genome")
ggplot(data, aes(x = as.Date(Date), y = Mb)) +
  geom_line() +
  xlab("") +
  ylab("") +
  scale_y_continuous(trans = "log10", labels = comma, n.breaks = 6) +
  scale_x_date(breaks = "year", labels = date_format("%Y"))
```

::: {.flushright}

Sequencing cost ($) per megabase [@wetterstrandka_DNASequencingCosts_]

:::

:::

::: {.column width="50%"}

::: {.fragment}

![](assets/images/Kahn-2011-fig1.jpeg){width=80%}

::: {.flushright}

*On the future of genomic data* [@kahn_FutureGenomicData_2011] (!)

:::

:::

:::

::::

::: {.notes}

Slide on sequencing technology evolution / Moore's law -> something to
highlight the current data explosion and the difficulties of analysing
large-scale data

cf Yan's slide from 2011

:::

# Population genomics

From sample collection and preparation through assembly, sequencing,
variant calling and other data processing steps to **genotype
matrices**

:::{}

![](assets/images/popgen.svg){width=90%}

:::

# Making sense of variation data

:::: {.columns}

::: {.column width="25%"}

:::

::: {.column width="50%"}

![](assets/images/poelstra-2014-fig2.jpeg){width=80%}

:::

::: {.column width="25%"}

:::: {style="display: grid; grid-template-columns: 100%;
grid-row-gap: 500px; grid-column-gap: 0px;"}

:::{}

:::

:::{}

::: {.flushright}

*The Genomic Landscape Underlying Phenotypic Integrity in the Face of
Gene Flow in Crows* @poelstra_GenomicLandscapeUnderlying_2014

:::

:::

::::

:::

::::

::: {.notes}

Genotype matrices represent the raw data; we want to convert it to
information, e.g., by doing genome scans for selection,
differentiation, calculating diversity, etc. In any case, these
analyses are manifestations of evolutionary relationships between
individuals and populations.

Segue: relationships can be represented as trees.

:::

# Genotype matrices and genealogical trees

![](assets/images/ralph-2020-fig1.jpeg)

:::: {.columns}

::: {.column width="50%"}

:::

::: {.column width="50%"}

::: {.flushright}

*Efficiently Summarizing Relationships in Large Samples: A General
Duality Between Statistics of Genealogies and Genomes.*
@ralph_EfficientlySummarizingRelationships_2020, Fig. 1

:::

:::

::::

::: {.notes}

Usually we summarize data in a table of genotypes (genotype matrix).
The sequences are related to oneanother, a relationship that can be
illustrated as a tree. By overlaying information on mutations on the
tree, we can also regenerate the sequences, as shown here. Note also
that the figure hints that a tree representation is a more
**efficient** representation of the data, in addition to being more
**accurate** and containing **more information** (demographic events,
history, ...)

:::

# Trees capture biology

:::: {style="display: grid; grid-template-columns: 300px 300px 300px
300px; grid-row-gap: 0px; grid-column-gap: 10px;"}

:::{}

*Neutral*

```{python }
#| label: msprime-trees-neutral
#| echo: false
#| eval: true
#| fig-format: svg
#| output: asis
#| out-width: 200px
import treeviz
print(treeviz.tree_topology(model="neutral", svgid="neutral"))
```

:::

:::{}

*Expansion*

```{python }
#| label: msprime-trees-expansion
#| echo: false
#| eval: true
#| fig-format: svg
#| output: asis
#| out-width: 100%
import treeviz
print(treeviz.tree_topology(model="expansion", svgid="expansion"))
```

:::

:::{}

*Bottleneck*

```{python }
#| label: msprime-trees-bottleneck
#| echo: false
#| eval: true
#| fig-format: svg
#| output: asis
#| out-width: 100%
import treeviz
print(treeviz.tree_topology(model="bottleneck", svgid="bottleneck"))
```

:::

:::{}

*Selection*

```{python }
#| label: msprime-trees-selection
#| echo: false
#| eval: true
#| fig-format: svg
#| output: asis
#| out-width: 100%
import treeviz
print(treeviz.tree_topology(model="selection", svgid="selection"))
```

:::

::::

::: {.notes}

cf <https://tskit.dev/tutorials/viz.html>

segue: problem is that sequences recombine leading to

Segue: need to transition to ARGs somehow; trees are genealogies, but
they change with recombination

:::

# Recombination modifies gene genealogies

:::: {.columns}

::: {.column width="40%"}

Most organisms recombine a lot!

:::

::: {.column width="60%"}

::: {.translatey50}

![](https://humanbiology.pressbooks.tru.ca/wp-content/uploads/sites/6/2019/06/MajorEventsInMeiosis_variant_int-1536x921.png){width=60%}

:::

::: {.translatey100}

::: {.flushright}

@miller_12SexualReproduction_2020, Fig. 5.12.3

:::

:::

:::

::::

:::{.translatey100}

```{python }
#| label: msprime-recombining-trees
#| echo: false
#| eval: true
#| fig-format: svg
#| output: asis
#| out-width: 100%
import treeviz
print(treeviz.recombination_trees())
```

:::

# Ancestral recombination graphs (ARGs)

:::{}

![](assets/images/brandt-genetics-2022-fig1a.jpeg){fig-align=center, width=35%}

::: {.flushright}

@y.c.brandt_EvaluationMethodsEstimating_2022 [Fig. 1a]

:::

:::

# A "genetic genealogy" tracks genome-wide inheritance paths

<!-- markdownlint-disable MD033 -->

:::: {.columns}

::: {.column width="30%"}

![<br>](assets/images/brandt-genetics-2022-fig1a.jpeg){height=400}

:::

::: {.column width="20%"}
![<br>](assets/images/brandt-genetics-2022-fig1b.jpeg){height=400}
:::
::: {.column width="50%"}

!["Succinct tree sequences"](assets/images/brandt-genetics-2022-fig1c.jpeg){height=400}

:::

::::

<!-- markdownlint-enable MD033 -->

::: {.flushright}

*Evaluation of Methods for Estimating Coalescence Times Using
Ancestral Recombination Graphs*
@y.c.brandt_EvaluationMethodsEstimating_2022 [Fig. 1]

:::

::: {.notes}

Marginal trees are correlated (sequentially Markovian coalescent).
Evidently sequence of marginal trees good candidate to approximate
ARG. Is there any such structure?

:::

# msprime enables simulation of large chromosomes with recombination

:::: {.columns}

::: {.column width="40%"}

*Graph representation*

:::{}

```{python }
#| label: msprime-graph-tree
#| echo: false
#| eval: true
#| fig-format: svg
#| output: asis
import treeviz
ts = treeviz.make_7_tree_4_tip_ts()
svgfile = treeviz.ts_to_arg_dot(ts, size="8,4.5")
with open(svgfile, "r") as fh:
    lines = [x.strip() for x in fh.readlines()]
svg = "\n".join(lines[6:])
print(svg)
```

:::

::: {.flushright}

cf <https://github.com/tskit-dev/tutorials/issues/43>

:::

:::

::: {.column width="50%"}

*Local tree representation*

::: {.translatey100}

```{python }
#| label: tree-sequence-3d
#| echo: false
#| eval: true
#| fig-format: svg
#| output: asis
import treeviz
print(treeviz.make_3d_tree(tree_width=100, lmargin=10, rmargin=10))
```

:::

:::

::::

::: {.translatey100}

::: {.flushright}

@kelleher_EfficientCoalescentSimulation_2016

:::

:::

# msprime stores data as succinct tree sequences

![Tree sequences [@baumdicker_EfficientAncestryMutation_2022, Fig. 2]](assets/images/baumdicker-2022-fig2.jpg){width=700}

# Tree sequences compress data and speedup analyses

:::: {style="display: grid; grid-template-columns: 400px 140px 600px;
220:grid-row-gap: 0px; grid-column-gap: 10px;"}

:::{}

- Compact storage (“domain specific compression”)
- Fast, efficient analysis (a "succinct" structure)
- Well tested, open source (active dev community)

:::

:::{.smallr}

Data compression

:::

:::{}

![](https://tskit.dev/tutorials/_images/225cf0b1bd47d6f577d9abcd45fc738beab745251c104a6e63439f9d7c40eb4b.svg){width=80%}

:::

:::{}

- Built-in functionality (well documented: <http://tskit.dev>)

::::{.smallr}

...but limited support for major genomic rearrangements (e.g.
inversions, large indels): genomes should be (reasonably) aligned =>
current primary focus = **population genetics**

::::

:::

:::{.smallr}

Speed

:::

:::{}

![](https://tskit.dev/tutorials/_images/92d2a0aed6370968593fded5856061bd46ef83a8308e5b360290f10067e44e7b.svg){width=80%}

:::

:::{}
:::

:::{}
:::

:::{.smallest}

::: {.flushright}

Source: [What is a tree sequence? (https://tskit.dev/tutorials/what_is.html)](https://tskit.dev/tutorials/what_is.html)

:::

:::

::::

# Getting hold of tree sequences

```{r, fig.ext="svg", engine="tikz" }
#| label: getting-tree-sequences
#| echo: false
#| eval: true
\begin{tikzpicture}[>=latex, node distance=1cm, thick]
\tikzstyle{method} = [text width=14em, inner sep=3pt, align=center, font=\Huge\sffamily\bfseries]
\tikzstyle{title} = [text width=12em, node distance=1cm, align=center,
font=\Large\sffamily]
\tikzstyle{cnode} = [node distance=9cm]
  \begin{scope}[xshift=2cm, yshift=7cm]
    \node[method] (simulation) at (0, 0) {Simulation};
\node[right of=simulation, cnode] (sims) {};
    \node[method, above of=sims] (slim) {SLiM};
\node[title, above of=slim] {Forwards-time};
    \node[method, below of=sims] (msprime) {msprime};
\node[title, below of=msprime] {Backwards-time};
    \draw[->] (simulation.east) -- (slim.west);
\draw[->] (simulation.east) -- (msprime.west);
  \end{scope}
  \begin{scope}[xshift=2cm, yshift=1cm]
    \node[align=center, method] (inference) at (0, 0) {Inference from\\ real data};
\node[right of=inference, cnode] (infmid) {};
\node[method, above of=infmid, node distance=0.5cm](tsinfer) {tsinfer};
\node[above of=tsinfer, title] { Topology only};
    \node[method, right of=tsinfer, cnode] (tsdate) {tsdate};
\node[above of=tsdate, title, node distance=1.2cm] {With branch\\ lengths (dated)};
    \node[method, below of=tsdate, node distance=1.5cm] (relate) {Relate};
\node[below of=relate, title, node distance=1.2cm] {(sequence of \\ separate trees)};
\draw[->] (inference.east) -- (tsinfer.west);
\draw[->] (tsinfer.east) -- (tsdate.west);
\draw[->] (inference.east) -- (relate.west);
\end{scope}
\end{tikzpicture}
```

::: {}

Other programs that don't output tree sequence format by default: *ARGweaver*, *Argneedle*

:::

# Analysing tree sequences

:::{.center}

![](https://raw.githubusercontent.com/tskit-dev/administrative/4e8f6586eb14c2b672cd14fbe23aa9f9e4bbefd3/tskit_logo.svg){width=500px}

:::

:::{.center .largest}

<https://tskit.dev>

:::

# tskit terminology: the basics

```{python }
#| label: basic-tree-file
#| echo: false
#| eval: true
#| output: asis
#| fig-format: svg
import treeviz
ts = treeviz.basics_tree()
style = (
    ".node > .lab {font-size: 150%}"
    ".x-axis {font-size: 150%}"
    ".y-axis {font-size: 150%}"
)
print(ts.draw_svg(y_axis=True, y_gridlines=True, time_scale="log_time",
                  y_ticks=[0, 3, 10, 30, 100, 300, 1000],
                  size=(1200, 380), style=style))
```

:::{}

- Multiple local trees exist along a genome of fixed length (by
  convention measured in base pairs)
- Genomes exist at specific times, and are represented by nodes (the
  same node can persist across many local trees)
- Some nodes are most recent common ancestors (MRCAs) of other nodes
- Entities are zero-based: the first node has id 0, the second id 1, ...

:::

::: {.flushright}

Images from online tutorial "Terminology & concepts" <https://tskit.dev/tutorials/terminology_and_concepts.html>

:::

# tskit terminology: nodes and edges {.smaller}

:::: {.columns}

::: {.column width="50%"}

```{python }
#| label: tskit-nodes-and-edges
#| echo: false
#| eval: true
#| output: asis
#| fig-format: svg
import treeviz
ts = treeviz.basics_tree()
style = (
    ".node > .lab {font-size: 75%}"
    ".x-axis {font-size: 75%}"
    ".y-axis {font-size: 75%}"
)
print(ts.draw_svg(y_axis=True, y_gridlines=True, time_scale="log_time",
                  y_ticks=[0, 3, 10, 30, 100, 300, 1000],
                  size=(500, 200), style=style))
```

::: {.fragment}

**Nodes (=genomes)**

- exist at a specific [time]{.cbppink .heavy}
- can be [flagged]{.cbpgreen .heavy} as "samples"
- can belong to "[individuals]{.cbporange .heavy}" (e.g., 2 nodes per
  individuals in humans) and, if useful, "[populations]{.cbptomato
  .heavy}"

::: {.small .dna}

<!-- markdownlint-disable MD013 -->

| id                | flags | population         | individual         | [time]{.cbppink-bg} | metadata |
|-----------------:|-----:|------------------:|------------------:|--------------------:|--------:|
| 0                 | 1     | 0                  | 0                  | 0.00000000          |          |
| 1                 | 1     | 0                  | [0]{.cbporange-bg} | 0.00000000          |          |
| 2                 | 1     | 0                  | [1]{.cbporange-bg} | 0.00000000          |          |
| 3                 | 1     | [0]{.cbptomato-bg} | [1]{.cbporange-bg} | 0.00000000          |          |
| 4                 | 1     | [0]{.cbptomato-bg} | 2                  | 0.00000000          |          |
| [5]{.cbpgreen-bg} | 1     | [0]{.cbptomato-bg} | 2                  | 0.00000000          |          |
| [6]{.cbpgreen-bg} | 0     | 0                  | -1                 | 14.70054184         |          |
| 7                 | 0     | 0                  | -1                 | 40.95936939         |          |
| 8                 | 0     | 0                  | -1                 | 72.52965866         |          |
| 9                 | 0     | 0                  | -1                 | 297.22307150        |          |
| 10                | 0     | 0                  | -1                 | 340.15496436        |          |
| 11                | 0     | 0                  | -1                 | 605.35907657        |          |

<!-- markdownlint-enable MD013 -->

:::

:::

:::

::: {.column width="50%"}

::: {.fragment}

**Edges**

- Connect a [parent & child]{.cbppink .heavy}
- Have a [left & right]{.cbpblue .heavy} genomic coordinate
- Usually span multiple trees (e.g., edges connecting nodes 1+7 and
  4+7)

:::{.small .dna}

<!-- markdownlint-disable MD013 -->

| id |             left |               right | [parent]{.cbppink-bg} | [child]{.cbppink-bg} | metadata |
|---:|-----------------:|--------------------:|----------------------:|---------------------:|---------:|
|  0 |                0 |                1000 |                     6 |                    2 |          |
|  1 |                0 |                1000 |                     6 |                    5 |          |
|  2 | [0]{.cbpblue-bg} | [1000]{.cbpblue-bg} |                     7 |                    1 |          |
|  3 | [0]{.cbpblue-bg} | [1000]{.cbpblue-bg} |                     7 |                    4 |          |
|  4 |                0 |                1000 |                     8 |                    3 |          |
|  5 |                0 |                1000 |                     8 |                    6 |          |
|  6 |              307 |                1000 |                     9 |                    0 |          |
|  7 |              307 |                1000 |                     9 |                    7 |          |
|  8 |                0 |                 307 |                    10 |                    0 |          |
|  9 |                0 |                 567 |                    10 |                    8 |          |
| 10 |              307 |                 567 |                    10 |                    9 |          |
| 11 |                0 |                 307 |                    11 |                    7 |          |
| 12 |              567 |                1000 |                    11 |                    8 |          |
| 13 |              567 |                1000 |                    11 |                    9 |          |
| 14 |                0 |                 307 |                    11 |                   10 |          |

<!-- markdownlint-enable MD013 -->

:::

:::

:::

::::

# tskit terminology: sites and mutations

:::: {.columns}

::: {.column width="50%"}

```{python }
#| label: tskit-sites-and-mutations-1
#| echo: false
#| eval: true
#| output: asis
#| fig-format: svg
import treeviz
ts = treeviz.treemut()
style = (
    ".node > .lab {font-size: 75%} "
    ".x-axis {font-size: 75%} "
    ".y-axis {font-size: 75%} "
    ".mut .sym {stroke: none} "
    ".mut .lab {fill: none} "
    ".site  {stroke-width: 1px} "
)
css_string = "#tsmut1 {" + style + "}"

print(ts.draw_svg(y_axis=True, y_gridlines=True, time_scale="log_time",
                  y_ticks=[0, 3, 10, 30, 100, 300, 1000],
                  size=(500, 200), style=css_string,
                  root_svg_attributes={'id': 'tsmut1'}))

```

:::

::: {.column width="50%"}

This is how we can encode genetic variation. Most genomic positions do
not vary between genomes: usually we don’t bother tracking these.

:::

::::

# tskit terminology: sites and mutations

:::: {.columns}

::: {.column width="50%"}

```{python }
#| label: tskit-sites-and-mutations-2
#| echo: false
#| eval: true
#| output: asis
#| fig-format: svg
import treeviz
ts = treeviz.treemut()
style = (
    ".node > .lab {font-size: 75%} "
    ".x-axis {font-size: 75%} "
    ".y-axis {font-size: 75%} "
    ".mut .sym {stroke: none} "
    ".mut .lab {fill: none} "
    ".site  {stroke-width: 1px} "
    ".site.s0 .sym {stroke: #D55E00; stroke-width: 3px} "
)
css_string = "#tsmut2 {" + style + "}"
print(ts.draw_svg(y_axis=True, y_gridlines=True, time_scale="log_time",
                  y_ticks=[0, 3, 10, 30, 100, 300, 1000],
                  size=(500, 200), style=css_string,
                  root_svg_attributes={'id': 'tsmut2'}))
```

:::{}

We can create a [site]{.cbptomato .heavy} at a given genomic
[position]{.cbpgreen .heavy} with a fixed [ancestral state]{.cbpblue
.heavy}.

:::{.dna .smallr}

| id |           position |  ancestral_state | metadata |
|---:|-------------------:|-----------------:|---------:|
|  0 | [52]{.cbpgreen-bg} | [C]{.cbpblue-bg} |          |
|  1 |                200 |                A |          |
|  2 |                335 |                A |          |
|  3 |                354 |                A |          |
|  4 |                474 |                G |          |
|  5 |                523 |                A |          |
|  6 |                774 |                C |          |
|  7 |                796 |                C |          |
|  8 |                957 |                A |          |

:::

:::

:::

::: {.column width="50%"}

This is how we can encode genetic variation. Most genomic positions do
not vary between genomes: usually we don’t bother tracking these.

:::

::::

# tskit terminology: sites and mutations

:::: {.columns}

::: {.column width="50%"}

```{python }
#| label: tskit-sites-and-mutations-3
#| echo: false
#| eval: true
#| output: asis
#| fig-format: svg
import treeviz
style = (
    ".node > .lab {font-size: 75%} "
    ".x-axis {font-size: 75%} "
    ".y-axis {font-size: 75%} "
    ".site  {stroke-width: 1px} "
    ".site.s0 .sym {stroke: #D55E00; stroke-width: 3px} "
)
css_string = "#tsmut3 {" + style + "}"
ts = treeviz.treemut()
print(ts.draw_svg(y_axis=True, y_gridlines=True, time_scale="log_time",
                  y_ticks=[0, 3, 10, 30, 100, 300, 1000],
                  size=(500, 200), style=css_string,
                  root_svg_attributes={'id': 'tsmut3'}))
```

:::{}

We can create a [site]{.cbptomato .heavy} at a given genomic
[position]{.cbpgreen .heavy} with a fixed [ancestral state]{.cbpblue
.heavy}.

:::{.dna .smallr}

| id |           position |  ancestral_state | metadata |
|---:|-------------------:|-----------------:|---------:|
|  0 | [52]{.cbpgreen-bg} | [C]{.cbpblue-bg} |          |
|  1 |                200 |                A |          |
|  2 |                335 |                A |          |
|  3 |                354 |                A |          |
|  4 |                474 |                G |          |
|  5 |                523 |                A |          |
|  6 |                774 |                C |          |
|  7 |                796 |                C |          |
|  8 |                957 |                A |          |

:::

:::

:::

::: {.column width="50%"}

This is how we can encode genetic variation. Most genomic positions do
not vary between genomes: usually we don’t bother tracking these.

:::{}

Normally, a site is created in order to place one or [more]{.cbporange
.heavy} [mutations]{.cbptomato .heavy} at that site

::: {.dna .smallr}

<!-- markdownlint-disable MD013 -->

| id |               site | node |         time | derived_state | parent | metadata |
|---:|-------------------:|-----:|-------------:|--------------:|-------:|---------:|
|  0 |                  0 |    8 | 247.85988972 |             T |     -1 |          |
|  1 |                  1 |    0 | 169.80687857 |             C |     -1 |          |
|  2 |                  2 |    3 |  31.84262397 |             C |     -1 |          |
|  3 | [3]{.cbporange-bg} |    9 | 326.26095349 |             C |     -1 |          |
|  4 | [3]{.cbporange-bg} |    7 |  71.04212649 |             T |      3 |          |
|  5 |                  4 |    3 |  42.72352948 |             C |     -1 |          |
|  6 |                  5 |    7 |  55.44045835 |             T |     -1 |          |
|  7 |                  6 |    0 | 259.82567754 |             T |     -1 |          |
|  8 |                  7 |    8 | 169.87040769 |             G |     -1 |          |
|  9 |                  8 |    0 |  42.47396523 |             C |     -1 |          |

<!-- markdownlint-enable MD013 -->

:::

:::

:::

::::

# Using tskit

<!-- markdownlint-disable MD013 -->

:::: {.columns}

::: {.column width="25%"}

![](https://www.python.org/static/community_logos/python-logo.png){height=70px}

:::

::: {.column width="25%"}

![](https://upload.wikimedia.org/wikipedia/commons/thumb/3/35/The_C_Programming_Language_logo.svg/1280px-The_C_Programming_Language_logo.svg.png){height=70px}

:::

::: {.column width="25%"}

![](https://cran.r-project.org/Rlogo.svg){height=70px}

:::

::: {.column width="25%"}

![](https://www.rust-lang.org/static/images/rust-logo-blk.svg){height=70px}

:::

::::

:::{.large .center}

Docs and tutorials

<https://tskit.dev/tskit/docs>

<https://tskit.dev/tutorials>

:::

:::: {.columns .center}

::: {.column width="30%"}

![](https://github.com/tskit-dev/administrative/blob/main/logos/pngs/msprime/Tskit_msprime_logo.png?raw=true){height=70px}

<!-- markdownlint-disable MD033 -->

![](http://benhaller.com/slim/icon/SLiM_256.jpg){height=70px}
<br>*SLiM*

<!-- markdownlint-enable MD033 -->

:::

::: {.column width="40%"}

![](https://github.com/tskit-dev/administrative/blob/main/logos/pngs/tskit/Tskit_logo.png?raw=true){height=200px}

:::

::: {.column width="30%"}

![](https://github.com/tskit-dev/administrative/blob/main/logos/pngs/tsinfer/Tskit_tsinfer_logo.png?raw=true){height=70px}

![](https://github.com/tskit-dev/administrative/blob/main/logos/pngs/tsdate/Tskit_tsdate_logo.png?raw=true){height=70px}

:::

::::

<!-- markdownlint-enable MD013 -->

# tskit and biodiversity

tskit assumes

1. known ancestral state
2. phased genomes

and requires fairly large sample sizes to leverage  power of data
compression ($n>1000$) and speedup of statistical analyses ($n$ in the
hundreds)

::: {.fragment}

...conditions that are not always met for natural populations of non-model organisms

:::

# Reasons to use tskit ecosystem for evolution and biodiversity {.smaller}

::: {.incremental}

future-proofing
: cheaper and longer read sequencing will require this sort of approach

simulation
: simulation software builds on tskit (msprime/SLiM/stdpopsim)

biology
: thinking in trees captures the "true" biology (unless structural
  variation)

statistical power
: trees capture genealogical history and variation and potentially
  have more statistical power than other methods, such as summary
  statistics

teaching
: biodiversity crowd very familiar with phylogenetic trees making the
  extension to tree sequences a short jump

modelling of complex histories
: complex histories with, e.g., hybridization / speciation, will have
  lots of ILS / conflicting trees which needs to be tackled somehow

alternatives to tsinfer
: tsinfer is only one way to infer genealogies but easy to introduce
  and demonstrate

:::

::: {.notes}

Points from slack chat with Yan
(<https://tskit-dev.slack.com/archives/D059M7619LZ/p1693315982321149>)
and ARGweaver tutorial [@hubisz_InferenceAncestralRecombination_2020]

:::

# Application: Evolutionary genomics of the *Motacilla alba* (white wagtails) radiation

:::: {.columns}

::: {.column width="55%"}

::::: {#fig-motacilla layout-ncol=5}

![](assets/images/Yarrellii.jpg)

![](assets/images/Personata.jpg)

![](assets/images/Baicalensis.jpg)

![](assets/images/Alba.jpg)

![](assets/images/Alboides2.jpg)

![](assets/images/Leucopsis.jpg)

![](assets/images/Lugens.jpg)

![](assets/images/Ocularis.jpg)

![](assets/images/Subpersonata.jpg)

*Motacilla alba* subspecies; from top left *M. yarrellii*, *M. personata*,
*M. baicalensis*, *M. alba*, *M. alboides*, *M. leucopsis*, *M. lugens*, *M.
ocularis*, and *M. subpersonata*. Paintings by Bill Zetterström (from
@alstrom_PipitsWagtailsEurope_2003)

:::::

::: {.flushright}

Together with Erik Enbody, Tom van der Valk, Leif Andersson, and Per
Alström.

:::

:::

:::

:::{.column width="8%"}

:::

::: {.column width="35%"}

::: {.fragment}

:::{.translatey100}

![](assets/images/snakemake.png){height=50px}

![Snakemake rulegraph](assets/images/rulegraph.png){height=400px}

::: {.flushright}

Source code at <https://github.com/percyfal/tswf>

:::

:::

:::

:::

::::

# Genealogical nearest neighbour chromosome plots

:::{.center}

```{=html}
<div id="wrap">
 <iframe id="popeda" src="population.eda.html" title="Population EDA"></iframe>
</div>
```

:::

# Genealogical nearest neighbour haplotype plots

::::: {#fig-gnn-haplotype layout-ncol=2}

![]({{< var hap_1_0 >}}){width=50%}

![]({{< var hap_1_1 >}}){width=50%}

![]({{< var hap_2_0 >}}){width=50%}

![]({{< var hap_2_1 >}}){width=50%}

![]({{< var hap_3_0 >}}){width=50%}

![]({{< var hap_3_1 >}}){width=50%}

GNN proportions for chromosome 20 for selected individuals.

:::::

# Acknowledgements

- Tom van der Valk
- Gabriel David

## tskit development team

- Yan Wong
- Peter Ralph

## Wagtail group

- Erik Enbody
- Leif Andersson
- Per Alström

# Bibliography {.unnumbered .unlisted}

::: { #refs }
:::
